generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  firstname         String
  lastname          String
  email_verified_at DateTime?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  audits            Audit[]
  sites             Site[]
  subscriptions     Subscription[]
}

model Site {
  id          Int       @id @default(autoincrement())
  user_id     Int
  name        String
  url         String    @unique
  description String?
  last_audit  DateTime?
  created_at  DateTime  @default(now())
  audits      Audit[]
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Audit {
  id                    Int                    @id @default(autoincrement())
  user_id               Int
  site_id               Int
  status                String                 @default("pending") // 'pending', 'running', 'completed', 'failed'
  lighthouse_score      Float?
  lighthouse_data       Json?                  // Données brutes de Lighthouse
  agent_analysis        AgentAnalysis?         // Relation one-to-one avec l'analyse d'agent
  overall_score         Float?
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  completed_at          DateTime?
  
  site                  Site                   @relation(fields: [site_id], references: [id], onDelete: Cascade)
  user                  User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([site_id])
  @@index([status])
  @@index([created_at])
}

model AgentAnalysis {
  id                    Int      @id @default(autoincrement())
  audit_id              Int      @unique       // Relation one-to-one avec Audit
  agent_version         String
  analysis_data         Json     // Rapport complet de l'agent
  recommendations       Json     // Recommandations spécifiques
  priority_issues       Json?    // Problèmes prioritaires
  improvement_score     Float?   // Score d'amélioration suggéré
  processing_time       Int?     // Temps de traitement en ms
  created_at            DateTime @default(now())
  
  audit                 Audit    @relation(fields: [audit_id], references: [id], onDelete: Cascade)
  
  @@index([audit_id])
  @@index([created_at])
}

model Plan {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  description       String?
  price             Float
  currency          String         @default("EUR")
  duration_months   Int
  max_audits_per_month Int
  features          Json?
  is_active         Boolean        @default(true)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  
  subscriptions     Subscription[]
  
  @@index([is_active])
}

model Subscription {
  id                    Int      @id @default(autoincrement())
  user_id              Int
  plan_id              Int
  start_date           DateTime
  end_date             DateTime
  status               String   // 'active', 'expired', 'cancelled'
  payment_method_id    String?
  audits_used_this_month Int    @default(0)
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt
  
  user                 User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan                 Plan     @relation(fields: [plan_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
  @@index([plan_id])
  @@index([status])
  @@index([end_date])
}
